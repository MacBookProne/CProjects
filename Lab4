#include <stdio.h>
#include <math.h>


// List of all function prototypes

// displays user menu, reads input, and validates input
int user_menu();

// Equation functions that are pass by reference
void equation1(float *);            // calculate motion equation 1
void equation2(float *);            // calculate motion equation 2
void equation3(float *);            // calculate motion equation 3
void equation4(float *);            // calculate motion equation 4

// User input functions return a value from user
float get_position_initial(void);   // Prompts user for x0
float get_position_final(void);     // Prompts user for xf
float get_velocity_initial(void);   // Prompts user for v0
float get_velocity_final(void);     // Prompts user for vf
float get_acceleration(void);       // Prompts user for a
float get_time(void);               // Prompts user for t

int main (void) {


    printf("Welcome to the Motion Equation Calculator\n\n"); //print statement
    int user_choice; // variable for choice menu
    do {

        user_choice = user_menu(); //prints menu


        float result; //variable to hold calculated result.

        switch (user_choice) // handle menu choice
        {
            case 1:
                equation1(&result);
                break;

            case 2:
                equation2(&result);
                break;

            case 3:
                equation3(&result);
                break;
            case 4:
                equation4(&result);
                break;
            case 5:
                printf("Thank you for using the Motion Equation Calculator.\n");
                return 0;
                break;
        }
        printf("Your result is %4f.\n\n",
               result); // prints out the result of which ever calcualtions we have.  to 4 decimals


    } while (user_choice != 5);
    return 0;  // exit
}
int user_menu(void){
    int temp;
    printf("Press keys 1-5 to calculate the final velocity (keys 1 and 3), final postion (keys 2 and 4), and quit the program (5).");
    scanf("%d", &temp);
    return temp;
}

float get_position_initial(void){  //function and place holder
    float temp;
    printf("please enter an initial postion.");
    scanf("%f", &temp);
    return temp;
}

float get_position_final(void) {    //function and place holder
    float temp;
    printf("please enter an final postion.");
    scanf("%f", &temp);
    return temp;

}
    float get_velocity_initial(void) {    //function and place holder
        float temp;
        printf("please enter an initial velocity.");
        scanf("%f", &temp);
        return temp;
    }

        float get_velocity_final(void) {    //function and place holder
            float temp;
            printf("please enter an final velocity.");
            scanf("%f", &temp);
            return temp;
        }

            float get_acceleration(void) {    //function and place holder
                float temp;
                printf("please enter acceleration.");
                scanf("%f", &temp);
                return temp;

            }

                float get_time(void) {    //function and place holder
                    float temp;
                    printf("please enter the time");
                    scanf("%f", &temp);
                    return temp;
                }

void equation1(float *EqPointer){ //equation
    printf("Equation One\n");
    float f = get_time();
    *EqPointer = get_position_initial() + get_acceleration() * f;
}

void equation2(float *EqPointer) {  //equation
    printf("Equation Two\n");
    float f = get_time();
    *EqPointer = get_position_initial() + get_velocity_initial() * f + 0.5 * get_acceleration() * f*f;
}

void equation3(float *EqPointer) { //equation
    printf("Equation Three\n");
    float f = get_time();
    *EqPointer = sqrtf(f * f + 2 * get_acceleration() * (get_position_final() - get_position_initial()));
}

void equation4(float *EqPointer) { //equation
    printf("Equation Four\n");
    *EqPointer = get_position_initial() + 0.5 *(get_velocity_final() + get_velocity_initial()* get_time());
}


